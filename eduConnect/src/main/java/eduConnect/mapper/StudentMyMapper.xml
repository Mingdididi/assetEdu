<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC    
   "-//mybatis.org//DTD Mapper 3.0//EN" 
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="eduConnect.mapper.StudentMyMapper">
<sql id="studentColumnsBase">
 student_num studentNum, student_name studentName, student_id studentId,student_pw studentPw,
	  student_birth studentBirth, student_email studentEmail, student_gender studentGender, 
	  student_phone studentPhone, student_addr studentAddr, student_addr_detail studentAddrDetail,
	  student_post studentPost, student_email_conf studentEmailConf
</sql>
<select id="studentMyInfo" parameterType="string" resultType="student">
select <include refid="studentColumnsBase"/> from student where student_id = #{studentId}
</select>
<update id="studentUpdate" parameterType="student">
update student set student_name=#{studentName}, student_Id=#{studentId}, student_addr=#{studentAddr}, 
student_addr_detail=#{studentAddrDetail}, student_post=#{studentPost}, student_phone=#{studentPhone},
student_birth=#{studentBirth}, student_email=#{studentEmail} where student_Id=#{studentId}
</update>
<delete id="studentDelete" parameterType="string">
delete from student
where student_num = #{studentNum}
</delete>

<resultMap type="stuCourseList" id="stuCourseResultMap">
	<result column="student_num" jdbcType="VARCHAR" property="studentNum"/>
	<result column="teacher_name" jdbcType="VARCHAR" property="teacherName"/>
	<association property="courseDTO" javaType="course">
			<result column="course_num" jdbcType="VARCHAR" property="courseNum" />
			<result column="course_name" jdbcType="VARCHAR" property="courseName" />
			<result column="course_content" jdbcType="VARCHAR" property="courseContent" />
			<result column="teacher_num" jdbcType="VARCHAR" property="teacherNum" />
			<result column="course_url" jdbcType="VARCHAR" property="classRoom" />
		</association>
</resultMap>

<select id="stuCourseList" parameterType="string" resultMap="stuCourseResultMap">
select c.course_num, c.course_name , c.course_content , c.teacher_num , 
c.course_url , sc.student_num, t.teacher_name 
from student_course sc join course c 
on (sc.course_num = c.course_num) join teacher t 
on (c.teacher_num = t.teacher_num)
where sc.student_num = #{studentNum}
</select>

<insert id="stuCourseRegist" parameterType="stuCourse">
insert into student_course(student_num, course_num) values(#{studentNum}, #{courseNum})
</insert>

<insert id="courseStuAdd" parameterType="stuCourse">
insert into course_student(student_num, course_num) values(#{studentNum}, #{courseNum})
</insert>

<select id="testSelect" parameterType="string" resultType="string">
select session_num from test t join course_student cs
on(t.course_num = cs.course_num)
where student_num = #{studentNum}
</select>

<insert id="attendInsert">
insert into attendance_records(attend_num, course_num, student_num, session_num, attend_status)
values((select concat('att' , coalesce(max(substr(attend_num,4)::Integer),100000) + 1) from attendance_records)
	   , #{courseNum},#{studentNum},#{sessionNum},'결석')
</insert>

<select id="studentCourseRegistered" resultType="int">
    SELECT CASE WHEN EXISTS (
        SELECT 1
        FROM student_course
        WHERE student_num = #{studentNum} AND course_num = #{courseNum}
    ) THEN 1 ELSE 0 END AS row_exists
</select>
</mapper>